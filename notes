Models of Computation
    NAND is functionally complete
        x -> [any bool func] -> y
        easy
    
    Von Neumann
        ↓ Stack
        ↑ Heap               <---sp---
        ---------------------        |
        Globals                     ALU
        ---------------------
        Literals (constants)     Registers
        ---------------------        |
        Text/Code            <---pc---

    NAND -> Von Neumann
    Perceptron -> Neural network

    CPU (most run on these two chipsets)
    intel
    ARM

    Dev container:
    ctrl+shift+p
    

    Models of Computation
                        NOR
    Classical Computer (NAND) -> Von Neumann Machine
                                 Harvard Architecture

    Harvard Architecture
        Stack ↓
        Heap ↑

        Globals
        ---------------------
        Literals              ----
        ---------------------     |--> ROM
        Code                  ----

    Neural Network (Perceptron -> Neural net)

    Probabilistic                # leaf cases ~4^n
        x=1 with prob .3                p=1
        7 with prob .6           /       |      \
        8 with prob .1       .3         .6          .1
        n loops             x=1         x=7         x=8
                                    /     \
                                .3           .3
                                y=0         y=1
        Probabilistic
            Useful
            Computationally expensive
            Except of a quantum computer

            2^256
                ↑
        k=0... n-1 with p=1/n
        if k decrypts message m
        then
            y=k
        else
            y=0
        y=k/n


Programming Models
    (Language Paradigms)
    Procerdural
    Functional
    Logic/Constraint
    Object oriented

    CISC instruction set
     ______
    | RISC | <--- CISC
    |10,000|   PC
    |______|

    Don't have to run sequentially, can be run in parallel

    Functional programming style
    x  \        = a
         > g(x, y)  \
    y  /              \
             = b        i(a, b) --> result
    z --- h(z)      /

    What is a function
        In functional programming, functions are:
        • For a set of inputs x0, x1, ..., xn-1
            f(x0, .., xn-1)
        • It can be completed
        • Result is the same when the inputs are the same
            ↓ return value
    
       Data       / SQL (relational db)
         ↓     DB \ NOSQL (document)
       State   /     
       ↑   ↓       Requests for state changes
    Transactions   (don't say how, just what)

    SQL
    User        Order       Item

    Transaction
    C (Create)
    R (Retrieve)
    U (Update)
    D (Delete)

    Join
    user x order

OO:
-> Maps do have human cognition
-> Concepts

Object-Based Programming
-> class Pencil{
      Color color;          --> property
      void white(...){...}  --> method
   }

Single inheritance
    only 1 parent
Multiple inheritance
    more than 1 parent

Pencil is a kind of writing instrument
    Projectile        Writing Instr.
              \      /
               Pencil

Virtual inheritance
    Diamond of death

Object Oriented Programming

Validation
Bobby; drop table users;
Username        Regular
Email    <--> Expressions

Regular Expressions
Language that represent sets of strings
-Pretty convenient for humans
-Translated into matchers in node.
                             Strings
                            /
RE -> RE computer -> Matcher
                            \
                             Find matches of RE
                             in the string
// is a RE that matches the empty string // -> {""}
/x/
/n/
/$/
RS
{"x"} Set of strings that is the single empty string
" the beginning of a string

matches all the strings that can be split into 2 parts
m = r + s when r matches R and s matches S.
       \ 
        concatenation

Exam 2:
E -> T
E -> T add E
T -> F
T -> F mul T
F -> lp E rp
F -> number

number = /[0-9]+/
lp = /(/
rp = /)/
add = /+/
mul = /*/

Tokens/Terminals
    {number, lp, rq, add, mul}
N-T
    {E, T, F}

3 * (7 + 5)
Last thing that has to happen at the top of the tree.
    E
    T
F   *   T
n(3)    F
       (E)
     T  +  E
     F     T
    n(5)   F
          n(7)

Grammar:
Token
    terminals -- token type/token
    Non-terminals
    NT -> some string

                  scanner            parse
                     ↓                 ↓
Byte Stream -> UTF8 -> Token Stream    ->    Abstract Syntax Tree
    ↓           ↓           ↓
  read()      omitted  getNextToken()
put-back()

 AST Node
 /  |  \
NN  UO  BO

NN: N n
UO: Unary operator
BO: Binary operator

PM (plus/minus) MD(multiply/divide)
Parse -> Expression eof
Exp -> Term [PM TERM]*
PM -> '+'|'-'
Term -> Factor [MD Factor]*
MD -> '*'|'/'
Factor -> PM Factor |number| LP EXP RP

Right recursion:
E -> t | T + E
Left recursion:
E -> T | E + T
↑        ↑
non-terminal
on left

      ___________
stack| x, y      |} frame
  ↓  | |  ↓--> 4 |
     | ↓--> 3    |
  ↑  |           |
 head|           |
  ↓  |   this    |
     |___________|
     | code text |
     |___________|


const int *x = new int(3)
const int *y = x;
(*y) = (*y) + 1 <- does not work

 ________
|bool    |
|int     |
|float   |
|str     |
|________|
   ↓
primitive types 
are immutable

std::shared_ptr<const int> x;
std::make_ptr<const int>(3);
Garbage collection

Mark-sweep g.c.

Call by value/reference
Call by Value:
the function/method local
arguments have a copy of
the actual arguments
Call by Reference:
the function/method local
arguments have the address
of the actual arguments

Aliases
    In call by reference, the args are
    aliases for the actual parameters.
Mutability
    Object/data that can be modified is
    called mutable.

const int *x = new int(7)
const string *y = new string("three")
x = [1, 3]  y = x[1]
something(x, y) -> 

def something(a, b):
    a = 3

Logic/Constraint
SQL- descriptive of data transactions
Prolog- queries a knowledge database

E -> T | T + E
T -> F | F * T
F -> (E) | n

Abstract syntax tree
(simple arith) 
[meaning]

Parse tree
(3+5)
    P.T
     ↓
     E
     ↓
     T
     ↓
     F
     ↓
    (E)
     ↓
   T + E
   ↓   ↓
   F   T
   ↓   ↓
  n(3) F
       ↓
      n(5)

Bytes -> Chars -> Tokens -> AST
                ↓         ↓
            scanner     Parser
             lexer      /    \
                  Recurs.     Shift
                  descent     reduce
                     ↓           ↓     Tool build (prefers left recurs.)
                 looks like   shift in tokens
  Hand build     grammar      from lex/scanner
  (cant do       /                      \
  left recur.)  /                        \
        AST *exp(){             once some grammar rule
            AST *t = term();    is certain, reduce using
            if(match('+'))      that rule
                append(expr())         n+
        }                       E prefers to be on left
E can't be on left


Exam 2:
1. RE are descriptions of matchers that match sets of strings, they are built up from parts sort of like algebra equations. Ex. cats? matches "cat" or "cats" They are used in data validation in forms + exchanges and in prog. languages are used to identify tokens.
2. Context free grammars are substitution rules like E -> T | T, that define a set of strings (similar to RE's). They are more powerful than regular expressions (turing complete). They are used to define languages and their structure, like if_statement -> If expr then block, etc. They are used in parsers to create parse trees, and most importantly abstract syntax trees to define the structure of the language.
3. 
4. Left recursion in RDP like E -> E + T | T, cause infinite recursion in the parser (because matching E asks to match without consuming any tokens).
5. UTF-8 is a standard multibyte encoding for unicode characters. This is commonly how byte oriented data like files, sockets, web connections are converted to characer streams, so the first stage of any modern scanner. bytes -> chars -> tokens -> trees
6. Mark-sweep stops all threads, and marks all the objects referred to by the stacks of those threads. Then it recursively marks all objects they refer to (like a fill-paint). Once all reachable objects are marked, the remainder are unreachablle and so are swept. The garbage collector may further pack the remaining objects to free up gaps. Guaranteed correct, but forces arbitrary stops of all work (unsuitable for real time applications).
7. x = 3 Lets x refer to the 3 number object. Then x = x + 1 creates a new object (number 4) that x refers to. If nothing refers to the 3, it may be cleaned up.
8. In an everything is an object language, arguments are passed by value, which are all references to objects on the heap. This creates lots of aliases, which would be hard to follow if they could be mutated. By making primitive types immutable this making writing code understandable.
9. Prolog's reasoning is based on specific rules defined by the programmer. So the logic it follows is certain. Machine learning cannot guarantee any outcome (and is expensive), so if you cannot guarantee something, it's hard to bet your life on it.
10. (x+3) * y
        E
        ↓
        T
        ↓
    T   *   F
    ↓       ↓
    F      id(y)
    ↓
   (E)
    ↓
E   +   T
↓       ↓
T       F
↓       ↓
F     num(3)
↓
id(x)
