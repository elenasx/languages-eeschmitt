Models of Computation
    NAND is functionally complete
        x -> [any bool func] -> y
        easy
    
    Von Neumann
        ↓ Stack
        ↑ Heap               <---sp---
        ---------------------        |
        Globals                     ALU
        ---------------------
        Literals (constants)     Registers
        ---------------------        |
        Text/Code            <---pc---

    NAND -> Von Neumann
    Perceptron -> Neural network

    CPU (most run on these two chipsets)
    intel
    ARM

    Dev container:
    ctrl+shift+p
    

    Models of Computation
                        NOR
    Classical Computer (NAND) -> Von Neumann Machine
                                 Harvard Architecture

    Harvard Architecture
        Stack ↓
        Heap ↑

        Globals
        ---------------------
        Literals              ----
        ---------------------     |--> ROM
        Code                  ----

    Neural Network (Perceptron -> Neural net)

    Probabilistic                # leaf cases ~4^n
        x=1 with prob .3                p=1
        7 with prob .6           /       |      \
        8 with prob .1       .3         .6          .1
        n loops             x=1         x=7         x=8
                                    /     \
                                .3           .3
                                y=0         y=1
        Probabilistic
            Useful
            Computationally expensive
            Except of a quantum computer

            2^256
                ↑
        k=0... n-1 with p=1/n
        if k decrypts message m
        then
            y=k
        else
            y=0
        y=k/n


Programming Models
    (Language Paradigms)
    Procerdural
    Functional
    Logic/Constraint
    Object oriented

    CISC instruction set
     ______
    | RISC | <--- CISC
    |10,000|   PC
    |______|

    Don't have to run sequentially, can be run in parallel

    Functional programming style
    x  \        = a
         > g(x, y)  \
    y  /              \
             = b        i(a, b) --> result
    z --- h(z)      /

    What is a function
        In functional programming, functions are:
        • For a set of inputs x0, x1, ..., xn-1
            f(x0, .., xn-1)
        • It can be completed
        • Result is the same when the inputs are the same
            ↓ return value
    
       Data       / SQL (relational db)
         ↓     DB \ NOSQL (document)
       State   /     
       ↑   ↓       Requests for state changes
    Transactions   (don't say how, just what)

    SQL
    User        Order       Item

    Transaction
    C (Create)
    R (Retrieve)
    U (Update)
    D (Delete)

    Join
    user x order

OO:
-> Maps do have human cognition
-> Concepts

Object-Based Programming
-> class Pencil{
      Color color;          --> property
      void white(...){...}  --> method
   }

Single inheritance
    only 1 parent
Multiple inheritance
    more than 1 parent

Pencil is a kind of writing instrument
    Projectile        Writing Instr.
              \      /
               Pencil

Virtual inheritance
    Diamond of death

Object Oriented Programming

Validation
Bobby; drop table users;
Username        Regular
Email    <--> Expressions

Regular Expressions
Language that represent sets of strings
-Pretty convenient for humans
-Translated into matchers in node.
                             Strings
                            /
RE -> RE computer -> Matcher
                            \
                             Find matches of RE
                             in the string
// is a RE that matches the empty string // -> {""}
/x/
/n/
/$/
RS
{"x"} Set of strings that is the single empty string
" the beginning of a string

matches all the strings that can be split into 2 parts
m = r + s when r matches R and s matches S.
       \ 
        concatenation

E -> T
E -> T add E
T -> F
T -> F mul T
F -> lp E rp
F -> number

number = /[0-9]+/
lp = /(/
rp = /)/
add = /+/
mul = /*/

Tokens/Terminals
    {nuber, lp, rq, add, mul}
N-T
    {E, T, F}

3 * (7 + 5)
Last thing that has to happen at the top of the tree.
    E
    T
F   *   T
n(3)    F
       (E)
     T  +  E
     F     T
    n(5)   F
          n(7)

Grammar:
Token
    terminals -- token type/token
    Non-terminals
    NT -> some string

                  scanner            parse
                     ↓                 ↓
Byte Stream -> UTF8 -> Token Stream    ->    Abstract Syntax Tree
    ↓           ↓           ↓
  read()      omitted  getNextToken()
put-back()

 AST Node
 /  |  \
NN  UO  BO

NN: N n
UO: Unary operator
BO: Binary operator

PM (plus/minus) MD(multiply/divide)
Parse -> Expression eof
Exp -> Term [PM TERM]*
PM -> '+'|'-'
Term -> Factor [MD Factor]*
MD -> '*'|'/'
Factor -> PM Factor |number| LP EXP RP

Right recursion:
E -> t | T + E
Left recursion:
E -> T | E + T
↑        ↑
non-terminal
on left

      ___________
stack| x, y      |} frame
  ↓  | |  ↓--> 4 |
     | ↓--> 3    |
  ↑  |           |
 head|           |
  ↓  |   this    |
     |___________|
     | code text |
     |___________|


const int *x = new int(3)
const int *y = x;
(*y) = (*y) + 1 <- does not work

 ________
|bool    |
|int     |
|float   |
|str     |
|________|
   ↓
primitive types 
are immutable

std::shared_ptr<const int> x;
std::make_ptr<const int>(3);
Garbage collection

Mark-sweep g.c.

