Final Presentation:
Why was this language created
What are the typical ways this language is used.
Write a program in this language.
~10 minutes

Categorization
    Programming paradigm, model of computation, 
    typing discipline, control flow
Why was it created?
Use cases
Demonstration

Compile/run:
-- sudo apt install ghc cabal-install
-- ghc -o main main.hs && ./main
-- ghc -o maybe maybe.hs && ./maybe

https://medium.com/sourcescribes/what-is-haskell-853b6949a800:
No statements or instructions, only expressions that cannot mutate variables or access states like time or random numbers.
Programs are written like mathematical functions
Monads: describes computations as sequences of steps which handle side effects. Constructed on top of a polymorphic type such as IO. Used for input/output, error handling, and state management.
Monad class has three functions: 
    return: takes value and puts it in monadic context 
    (>>=): "bind" chains together monadic computations
    (>>): "then" sequences two monadic computations, ignoring the result of the first


Slides:
What is Haskell?
Created to be a pure functional language and have no side effects.
All types of expressions are checked before the program is actually and they do not change during execution.
Has higher order functions that are able to take in other functions as parameters and are also able to return functions.
Utilizes lazy evaluations so expressions are not evaluated until they are actually needed.
Uses garbage collection, most commonly generational garbage collector which splits everything into regions based on the age of objects.

History of Haskell
Named after Haskell Brooks Curry due to his contribution in combinatory logic, which is the basis of functional programming.
Inspired by other functional languages at the time like ML, Hope, and Miranda.

Where It's Used
Teaching
- Good for learning programming concepts
Research
- Strength in reasoning, useful for statistics
- Ability to handle large datasets
Industry
- Used in areas like aerospace, finance, and healthcare
- Good at handling real-time streams

Monads
Provide a way to handle computations that can cause side effects, like input and output while keeping the program pure.

Return: Takes a value "a" and wraps it with the monad, producing m a.
Bind: Allows you to chain together monadic operations. If you need to perform a set of computations that could have side effects, this allows you to use a function on the value inside the monad.
Then: Similar to bind as they allow you to chain together monadic operations, but they ignore the results of the original/previous operation. Used for when order of operation matters.

Common monads:
Maybe: represents computations that might fail (Just, nothing)
Either: expands on maybe monad (left-error, right-success)
List: represents computations that can have multiple results
IO: Handles input and output while maintaining purity

Typeclasses
More abstract compared to classes in other languages
Define a set of methods that are shared between multiple types
Only able to accept certain types for a function
Compile-time type restraints
Types are checked before running
Have set operations so that they behave consistently
Inheritance allows for creating more specific types
Polymorphism- functions can work with multiple different types

Eq (==) (/=): equality and inequality
Ord (<, >, <=, >=): 
Functor: apply a function to values that are inside a context like maybe, list
